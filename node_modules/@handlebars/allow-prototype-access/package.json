{
  "_args": [
    [
      {
        "raw": "@handlebars/allow-prototype-access",
        "scope": "@handlebars",
        "escapedName": "@handlebars%2fallow-prototype-access",
        "name": "@handlebars/allow-prototype-access",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\hp\\Desktop\\final1"
    ]
  ],
  "_from": "@handlebars/allow-prototype-access",
  "_hasShrinkwrap": false,
  "_id": "@handlebars/allow-prototype-access@1.0.3",
  "_location": "/@handlebars/allow-prototype-access",
  "_nodeVersion": "10.18.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/allow-prototype-access_1.0.3_1580878759458_0.43182479575048727"
  },
  "_npmUser": {
    "name": "knappi",
    "email": "npm@knappi.org"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@handlebars/allow-prototype-access",
    "scope": "@handlebars",
    "escapedName": "@handlebars%2fallow-prototype-access",
    "name": "@handlebars/allow-prototype-access",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/@handlebars/allow-prototype-access/-/allow-prototype-access-1.0.3.tgz",
  "_shasum": "c1377438ba59da7d45db43e3be7d6f3eeece8103",
  "_shrinkwrap": null,
  "_spec": "@handlebars/allow-prototype-access",
  "_where": "C:\\Users\\hp\\Desktop\\final1",
  "author": "",
  "browserslist": [
    "chrome 70",
    "last 1 versions",
    "not ie < 8"
  ],
  "dependencies": {},
  "description": "Revert a Handlebars-instance ^4.6.0 to the proto-accessing behavior of 4.5.3",
  "devDependencies": {
    "@babel/cli": "^7.8.3",
    "@babel/core": "^7.8.3",
    "@babel/preset-env": "^7.8.3",
    "@types/jest": "^24.9.0",
    "@types/node": "^13.1.8",
    "@typescript-eslint/eslint-plugin": "^2.17.0",
    "@typescript-eslint/parser": "^2.17.0",
    "babel-jest": "^24.9.0",
    "eslint": "^6.8.0",
    "eslint-plugin-compat": "^3.3.0",
    "eslint-plugin-jest": "^23.6.0",
    "eslint-plugin-prettier": "^3.1.2",
    "handlebars": "^4.7.2",
    "husky": "^4.1.0",
    "jest": "^24.9.0",
    "lint-staged": "^10.0.1",
    "prettier": "^1.19.1",
    "thought": "^2.0.0",
    "tsd": "^0.11.0",
    "typescript": "^3.7.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-UjIJnXYirTtSuRAC/3Sq+2XCRd3+JBW5+wQVu7cRCXisvEj/u/913QKH3D5+YVyJkz6cAyD70sQkaL5zvXql5Q==",
    "shasum": "c1377438ba59da7d45db43e3be7d6f3eeece8103",
    "tarball": "https://registry.npmjs.org/@handlebars/allow-prototype-access/-/allow-prototype-access-1.0.3.tgz",
    "fileCount": 6,
    "unpackedSize": 10773,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeOkunCRA9TVsSAnZWagAAFmQP/iLw/GdG/iLBfBe/c1dF\nLm0UBVxvmnQwT8dbzHIHer7H/+Kz6uwiyBAVFyM3dq3Ia48TIu7tBe3v/fuG\nK65pqGyDAkvCnwFdlvlYWQW8G8WSN/jB5dLylIjj3xD+EHc831cvbkg22L/0\njngMebv6AUMJzyInhXJTseiTHFgnW7DCNWBEldgLvZP7AjPeAHu37n954odS\nOuokM+eNNo36LrKG0gkDPGVrttfohPHp3PwMjAWPVF8jx3Zys5jHoJ94ZPjw\nhEwfOHsi+17vLQ1UePZoCQv1zoH1L0mu5PDcpbtvXiAYRwFzEeOxAazhCyxj\nPtM8oSLwH+YHjsWagPJluJcfgh66b4SGUyMb6MASyCdxUkzAV+tSXcw75rGp\n8DU6ge02Ax8d3jjPihchV1l6Tpzm4n0xo+9XpVmSp9sswG65oUtTYe2hzOI2\nT1/KFHgxMetabhcKahpYq6/YHZLqX3mRuizbaBjZz5SDQFYbo6hlEP5Ngc/7\n9VXBYctYB8yO6OS+76D7DSyTgoI8AbHuV/tiRiFW5f7t8WBkwJOH1zz76tYe\nleKflfBU5mvo29E/Toz/gOUl0lvZioiPk8n/xHkQpK7WsbAkC6wqnCmelPgF\nO06hDIK5Hk7bozUh3xHs40mhlQOoM5iIshGvkzj0bGGBBPXiZ5eERzdMblSw\nAE9i\r\n=nDl8\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "src",
    "types/index.d.ts"
  ],
  "gitHead": "4a75a19ba801beaba77e8d0c3fee4df67e84f1e5",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [],
  "license": "MIT",
  "lint-staged": {
    "*.{js,ts}": [
      "eslint --fix",
      "git add"
    ],
    "*.{js,ts,md}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "dist/cjs/index.js",
  "maintainers": [
    {
      "name": "knappi",
      "email": "npm@knappi.org"
    }
  ],
  "module": "src/index.js",
  "name": "@handlebars/allow-prototype-access",
  "optionalDependencies": {},
  "peerDependencies": {
    "handlebars": "^4.7.2"
  },
  "readme": "# @handlebars/allow-prototype-access \n\n[![NPM version](https://img.shields.io/npm/v/@handlebars/allow-prototype-access.svg)](https://npmjs.com/package/@handlebars/allow-prototype-access)\n\n> Revert a Handlebars-instance ^4.6.0 to the proto-accessing behavior of 4.5.3\n\nThis package allows you to create a new Handlebars instance, that behaves like version 4.5.3 and allows access to the\nprototype\n\n## Why?\n\nIn the past, Handlebars would allow you to access prototype methods and properties of the input object form the\ntemplate.\n\n```hbs\nstart{{aString.trim}}end\n```\n\nwith the input\n\n```\n{\n    aString: '   abc    '\n}\n```\n\nwould result in the output `startabcend`.\n\nMultiple security issues have come from this behaviour. Details can be found in the npm-security advisories\n[755](https://www.npmjs.com/advisories/755),\n[1164](https://www.npmjs.com/advisories/1164), [1316](https://www.npmjs.com/advisories/1316),\n[1324](https://www.npmjs.com/advisories/1324) and [1325](https://www.npmjs.com/advisories/1325) and in the blog-article\nof [Mahmoud Gamal](http://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html).\n\nThose issues have been fixed, but we cannot be sure that there are ways around the fixes. That's why, in `handlebars@^4.6.0`.\naccess to the object prototype has been disabled completely.\n\nNow, if you use custom classes as input to Handlebars, your code won't work anymore.\n\n```js\nclass TestClass {\n  aMethod() {\n    return \"returnValue\";\n  }\n}\n\nconst Handlebars = require(\"handlebars\");\nconst template = Handlebars.compile(\"start {{aMethod}} end\");\nconst output = template(new TestClass());\n\nconsole.log(output);\n```\n\n```\nHandlebars: Access has been denied to resolve the property \"aMethod\" because it is not an \"own property\" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details\nstart  end\n```\n\nThis has now led to a number of problems for projects like [typedoc](https://npmjs.com/package/typedoc), because they are using such classes\nas input for the template.\n\nThis package automatically adds runtime options to each template-calls, disabling the security restrictions.\n\n## When NOT to use it?\n\nThe question is: Who is writing the templates that Handlebars is executing? Is it only your developers? Is it the user?\n\nThe leak published in [npm advisory 755](https://www.npmjs.com/advisories/755) meant that somebody writing a template\ncould effectively execute code inside your server. Although the disclosed exploits have been fixed, new exploits have\nbecome much more probable, now that the principle is well-known, so:\n\n**If your users are writing templates and you execute them on your server you should NOT use this package, but rather\nfind other ways to solve the problem.** I suggest you  convert your class-instances to plain JavaScript objects before\npassing them to the template function.\nEvery property or function you access, must be an \"own property\" of its parent.\n\n```js\nclass TestClass {\n  aMethod() {\n    return \"returnValue\";\n  }\n\n  asTemplateInput() {\n    return {\n      aMethod: this.aMethod.bind(this)\n    };\n  }\n}\n\nconst Handlebars = require(\"handlebars\");\n\nconst template = Handlebars.compile(\"{{aMethod}}\");\nconst output = template(new TestClass().asTemplateInput());\n\nconsole.log(output);\n```\n\n\n\n\n# Installation\n\n```\nnpm install @handlebars/allow-prototype-access\n```\n\n# Usage (plain Handlebars)\n\nThe following example demonstrates how to use this module:\n\n```js\nclass TestClass {\n  aMethod() {\n    return \"returnValue\";\n  }\n}\n\nconst Handlebars = require('handlebars')\nconst {allowInsecurePrototypeAccess} = require('@handlebars/allow-prototype-access')\nconst insecureHandlebars = allowInsecurePrototypeAccess(Handlebars)\n\nconst template = insecureHandlebars.compile('{{aMethod}}')\nconst output = template(new TestClass);\n\nconsole.log(output)\n```\n\nThis will generate the following output\n\n```\nreturnValue\n```\n\n# Usage ([express-handlebars](https://npmjs.com/package/express-handlebars) and [mongoose](https://npmjs.com/package/mongoose))\n\n`express-handlebars` does not allow you to specify runtime-options to pass\nto the template function. This package can help you disable prototype checks\nfor you models.\n\n**Only do this, if you have full control over the templates that are executed in the server.**\n\n```js\nconst express = require('express');\nconst Handlebars = require('handlebars')\nconst expressHandlebars = require('express-handlebars');\nconst {allowInsecurePrototypeAccess} = require('@handlebars/allow-prototype-access')\n\nconst app = express();\n\napp.engine('handlebars', expressHandlebars({\n    handlebars: allowInsecurePrototypeAccess(Handlebars)\n}));\napp.set('view engine', 'handlebars');\n...\n```\n\n\n\n\n\n# License\n\n`@handlebars/allow-prototype-access` is published under the MIT-license.\n\nSee [LICENSE.md](LICENSE.md) for details.\n\n\n \n# Contributing guidelines\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).",
  "readmeFilename": "README.md",
  "scripts": {
    "build:commonjs": "babel src --out-dir dist/cjs",
    "format": "prettier --write **/*.{js,ts,md}",
    "lint": "eslint --max-warnings 0 '**/*.{js,ts}'",
    "prepublish": "npm run build:commonjs",
    "pretest": "npm run build:commonjs",
    "test": "jest && tsd",
    "thought": "thought run -a",
    "version": "npm run thought"
  },
  "types": "types/index.d.ts",
  "version": "1.0.3"
}
